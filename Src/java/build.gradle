allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group = 'org.cqframework'
    version = '0.1'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'

    sourceCompatibility = '1.8'

    repositories {
        mavenCentral()
    }

    dependencies {
        testCompile group: 'org.testng', name: 'testng', version: '6.8.8'
        testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
        testCompile group: 'uk.co.datumedge', name: 'hamcrest-json', version: '0.2'
    }

    test {
        useTestNG()
    }

    jacoco {
        toolVersion = "0.7.4.201502262128"
    }

    check.dependsOn(jacocoTestReport)

    /*
       Turn on static code analysis by passing 'sca' as a system property:
       e.g., gradle -Dsca build

       Or add it to your user gradle.properties file (${HOME}/.gradle/gradle.properties):
       systemProp.sca=true
     */
    if (System.getProperty('sca') != null) {
        apply plugin: 'pmd'

        dependencies {
            pmd(
                    'net.sourceforge.pmd:pmd-core:5.3.1',
                    'net.sourceforge.pmd:pmd-java:5.3.1'
            )
        }

        pmd {
            consoleOutput = true
            toolVersion = "5.3.1"
            ruleSetFiles = files("${rootProject.projectDir}/custom-pmd-ruleset.xml")
            ruleSets = []
        }

        apply plugin: 'findbugs'

        findbugs {
            toolVersion = "3.0.1"
            excludeFilter = file("${rootProject.projectDir}/findbugs-exclude-filter.xml")
        }

        tasks.withType(FindBugs) {
            reports {
                xml.enabled = false
                html.enabled = true
            }
        }
    }
}

configure(subprojects.findAll {it.name in ['elm', 'quick', 'qdm']}) {
    configurations {
        xjc
    }

    dependencies {
        xjc group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.2.11'
        xjc group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.11'
        xjc group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.2.11'
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics-ant', version: '0.9.4'
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics', version: '0.9.4'
        xjc group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-fluent-api', version: '3.0'
        compile group: 'org.jvnet.jaxb2_commons', name: 'jaxb2-basics', version: '0.9.4'
    }

    ext.xjc = [
            destDir: "${projectDir}/src/generated/java",
            args: '-disableXmlSecurity -Xfluent-api -Xequals -XhashCode -XtoString'
    ]

    task generateSources << {
        file(xjc.destDir).mkdirs()

        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task', classpath: configurations.xjc.asPath)

        /* The above sets up the task, but the real work of the task should be specified in the subproject using
           generateSources.doLast.  For example:
               generateSources.doLast {
                   ant.xjc(destdir: xjc.destDir, schema: "${projectDir}/path/to/file.xsd") {
                       arg(line: xjc.args)
                   }
               }
        */
    }

    compileJava.dependsOn generateSources
    sourceSets.main.java.srcDirs += xjc.destDir

    clean {
        delete xjc.destDir
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

idea {
  project {
    languageLevel = '1.8'
    ipr {
      withXml { provider ->
        provider.node.component.find { it.@name == 'VcsDirectoryMappings' }.mapping.@vcs = 'Git'
      }

      whenMerged { project ->
        def examples = new org.gradle.plugins.ide.idea.model.Path('file://$PROJECT_DIR$/examples.iml', 'file://$PROJECT_DIR$/examples.iml', '$PROJECT_DIR$/examples.iml')
        if ((project.modulePaths.findAll { p -> p.url == examples.url }).empty) project.modulePaths.add(examples)

        def grammar = new org.gradle.plugins.ide.idea.model.Path('file://$PROJECT_DIR$/grammar.iml', 'file://$PROJECT_DIR$/grammar.iml', '$PROJECT_DIR$/grammar.iml')
        if ((project.modulePaths.findAll { p -> p.url == grammar.url }).empty) project.modulePaths.add(grammar)

        def cqllm = new org.gradle.plugins.ide.idea.model.Path('file://$PROJECT_DIR$/cql-lm.iml', 'file://$PROJECT_DIR$/cql-lm.iml', '$PROJECT_DIR$/cql-lm.iml')
        if ((project.modulePaths.findAll { p -> p.url == cqllm.url }).empty) project.modulePaths.add(cqllm)
      }
    }
  }
  workspace {
    iws {
      withXml { provider ->
        def props = provider.node.component.find { it.@name == 'PropertiesComponent' }
        
        def propMap = [
          '$PROJECT_DIR$/../grammar/cql.g4::/output-dir' : '$PROJECT_DIR$/cql/src/generated/java',
          '$PROJECT_DIR$/../grammar/cql.g4::/lib-dir' : '$PROJECT_DIR$/../grammar',
          '$PROJECT_DIR$/../grammar/cql.g4::/package' : 'org.cqframework.cql.gen',
          '$PROJECT_DIR$/../grammar/cql.g4::/gen-listener' : 'true',
          '$PROJECT_DIR$/../grammar/cql.g4::/gen-visitor' : 'true'
        ]

        propMap.each() { key, value ->
          if (! props.property.find { it.@name == key })
            props.appendNode('property', ['name' : key, 'value' : value])
        }
      }
    }
  }
}
